// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'models/call_history_item_model.dart';
import 'models/chat_history_item_model.dart';
import 'models/chat_message_model.dart';
import 'models/medicine_course_item_model.dart';
import 'models/person_model.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 7703886569829070493),
      name: 'CallHistoryItemModel',
      lastPropertyId: const IdUid(3, 4985205864062700765),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7738963634258874619),
            name: 'id',
            type: 6,
            flags: 129),
        ModelProperty(
            id: const IdUid(2, 5501281317812093265),
            name: 'personId',
            type: 11,
            flags: 520,
            indexId: const IdUid(1, 8332485934080759440),
            relationTarget: 'PersonModel'),
        ModelProperty(
            id: const IdUid(3, 4985205864062700765),
            name: 'calledTime',
            type: 10,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(2, 8474309904558187538),
      name: 'ChatHistoryItemModel',
      lastPropertyId: const IdUid(5, 1328572237440923966),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 4512996407153693507),
            name: 'id',
            type: 6,
            flags: 129),
        ModelProperty(
            id: const IdUid(2, 396919661756051089),
            name: 'personID',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 8445455461213523405),
            name: 'lastText',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 5507701263160530457),
            name: 'lastTextTime',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 1328572237440923966),
            name: 'unReadText',
            type: 6,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(3, 8418888330398408512),
      name: 'MedicineGroupItemModel',
      lastPropertyId: const IdUid(4, 6462917045315071146),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 8036147386778926445),
            name: 'id',
            type: 6,
            flags: 129),
        ModelProperty(
            id: const IdUid(2, 4396109511118650824),
            name: 'topic',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 176947839514377399),
            name: 'medicines',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 6462917045315071146),
            name: 'isExpanded',
            type: 1,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(4, 2785553090534984994),
      name: 'PersonModel',
      lastPropertyId: const IdUid(5, 5240508565070614833),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 3852306123280296916),
            name: 'id',
            type: 6,
            flags: 129),
        ModelProperty(
            id: const IdUid(2, 1423697639794799141),
            name: 'personName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 7341658634045085315),
            name: 'personAge',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 4874954373303593039),
            name: 'personGender',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 5240508565070614833),
            name: 'personLocation',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(5, 4553746437165866143),
      name: 'SentMessage',
      lastPropertyId: const IdUid(5, 3311408451931014689),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 1507475010742055451),
            name: 'id',
            type: 6,
            flags: 129),
        ModelProperty(
            id: const IdUid(3, 5928749666152375696),
            name: 'message',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 3929870795710823419),
            name: 'isSent',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 3311408451931014689),
            name: 'time',
            type: 10,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(5, 4553746437165866143),
      lastIndexId: const IdUid(2, 5408436424868035677),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [5408436424868035677],
      retiredPropertyUids: const [8427627516854768770],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    CallHistoryItemModel: EntityDefinition<CallHistoryItemModel>(
        model: _entities[0],
        toOneRelations: (CallHistoryItemModel object) => [object.person],
        toManyRelations: (CallHistoryItemModel object) => {},
        getId: (CallHistoryItemModel object) => object.id,
        setId: (CallHistoryItemModel object, int id) {
          object.id = id;
        },
        objectToFB: (CallHistoryItemModel object, fb.Builder fbb) {
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.person.targetId);
          fbb.addInt64(2, object.calledTime.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = CallHistoryItemModel(
              DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0)))
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          object.person.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          object.person.attach(store);
          return object;
        }),
    ChatHistoryItemModel: EntityDefinition<ChatHistoryItemModel>(
        model: _entities[1],
        toOneRelations: (ChatHistoryItemModel object) => [],
        toManyRelations: (ChatHistoryItemModel object) => {},
        getId: (ChatHistoryItemModel object) => object.id,
        setId: (ChatHistoryItemModel object, int id) {
          object.id = id;
        },
        objectToFB: (ChatHistoryItemModel object, fb.Builder fbb) {
          final lastTextOffset = fbb.writeString(object.lastText);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.personID);
          fbb.addOffset(2, lastTextOffset);
          fbb.addInt64(3, object.lastTextTime?.millisecondsSinceEpoch);
          fbb.addInt64(4, object.unReadText);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final lastTextTimeValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 10);
          final object = ChatHistoryItemModel(
              personID:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0),
              lastTextTime: lastTextTimeValue == null
                  ? null
                  : DateTime.fromMillisecondsSinceEpoch(lastTextTimeValue),
              lastText: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              unReadText:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0))
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    MedicineGroupItemModel: EntityDefinition<MedicineGroupItemModel>(
        model: _entities[2],
        toOneRelations: (MedicineGroupItemModel object) => [],
        toManyRelations: (MedicineGroupItemModel object) => {},
        getId: (MedicineGroupItemModel object) => object.id,
        setId: (MedicineGroupItemModel object, int id) {
          object.id = id;
        },
        objectToFB: (MedicineGroupItemModel object, fb.Builder fbb) {
          final topicOffset = fbb.writeString(object.topic);
          final medicinesOffset = fbb.writeList(
              object.medicines.map(fbb.writeString).toList(growable: false));
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, topicOffset);
          fbb.addOffset(2, medicinesOffset);
          fbb.addBool(3, object.isExpanded);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = MedicineGroupItemModel(
              topic: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              medicines: const fb.ListReader<String>(
                      fb.StringReader(asciiOptimization: true),
                      lazy: false)
                  .vTableGet(buffer, rootOffset, 8, []),
              isExpanded: const fb.BoolReader()
                  .vTableGetNullable(buffer, rootOffset, 10))
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    PersonModel: EntityDefinition<PersonModel>(
        model: _entities[3],
        toOneRelations: (PersonModel object) => [],
        toManyRelations: (PersonModel object) => {},
        getId: (PersonModel object) => object.id,
        setId: (PersonModel object, int id) {
          object.id = id;
        },
        objectToFB: (PersonModel object, fb.Builder fbb) {
          final personNameOffset = fbb.writeString(object.personName);
          final personLocationOffset = fbb.writeString(object.personLocation);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, personNameOffset);
          fbb.addInt64(2, object.personAge);
          fbb.addBool(3, object.personGender);
          fbb.addOffset(4, personLocationOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = PersonModel(
              personName: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              personAge:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0),
              personGender: const fb.BoolReader()
                  .vTableGet(buffer, rootOffset, 10, false),
              personLocation: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, ''))
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    SentMessage: EntityDefinition<SentMessage>(
        model: _entities[4],
        toOneRelations: (SentMessage object) => [],
        toManyRelations: (SentMessage object) => {},
        getId: (SentMessage object) => object.id,
        setId: (SentMessage object, int id) {
          object.id = id;
        },
        objectToFB: (SentMessage object, fb.Builder fbb) {
          final messageOffset = fbb.writeString(object.message);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addOffset(2, messageOffset);
          fbb.addBool(3, object.isSent);
          fbb.addInt64(4, object.time.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = SentMessage(
              time: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0)),
              message: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              isSent: const fb.BoolReader()
                  .vTableGet(buffer, rootOffset, 10, false))
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [CallHistoryItemModel] entity fields to define ObjectBox queries.
class CallHistoryItemModel_ {
  /// see [CallHistoryItemModel.id]
  static final id =
      QueryIntegerProperty<CallHistoryItemModel>(_entities[0].properties[0]);

  /// see [CallHistoryItemModel.person]
  static final person = QueryRelationToOne<CallHistoryItemModel, PersonModel>(
      _entities[0].properties[1]);

  /// see [CallHistoryItemModel.calledTime]
  static final calledTime =
      QueryIntegerProperty<CallHistoryItemModel>(_entities[0].properties[2]);
}

/// [ChatHistoryItemModel] entity fields to define ObjectBox queries.
class ChatHistoryItemModel_ {
  /// see [ChatHistoryItemModel.id]
  static final id =
      QueryIntegerProperty<ChatHistoryItemModel>(_entities[1].properties[0]);

  /// see [ChatHistoryItemModel.personID]
  static final personID =
      QueryIntegerProperty<ChatHistoryItemModel>(_entities[1].properties[1]);

  /// see [ChatHistoryItemModel.lastText]
  static final lastText =
      QueryStringProperty<ChatHistoryItemModel>(_entities[1].properties[2]);

  /// see [ChatHistoryItemModel.lastTextTime]
  static final lastTextTime =
      QueryIntegerProperty<ChatHistoryItemModel>(_entities[1].properties[3]);

  /// see [ChatHistoryItemModel.unReadText]
  static final unReadText =
      QueryIntegerProperty<ChatHistoryItemModel>(_entities[1].properties[4]);
}

/// [MedicineGroupItemModel] entity fields to define ObjectBox queries.
class MedicineGroupItemModel_ {
  /// see [MedicineGroupItemModel.id]
  static final id =
      QueryIntegerProperty<MedicineGroupItemModel>(_entities[2].properties[0]);

  /// see [MedicineGroupItemModel.topic]
  static final topic =
      QueryStringProperty<MedicineGroupItemModel>(_entities[2].properties[1]);

  /// see [MedicineGroupItemModel.medicines]
  static final medicines = QueryStringVectorProperty<MedicineGroupItemModel>(
      _entities[2].properties[2]);

  /// see [MedicineGroupItemModel.isExpanded]
  static final isExpanded =
      QueryBooleanProperty<MedicineGroupItemModel>(_entities[2].properties[3]);
}

/// [PersonModel] entity fields to define ObjectBox queries.
class PersonModel_ {
  /// see [PersonModel.id]
  static final id =
      QueryIntegerProperty<PersonModel>(_entities[3].properties[0]);

  /// see [PersonModel.personName]
  static final personName =
      QueryStringProperty<PersonModel>(_entities[3].properties[1]);

  /// see [PersonModel.personAge]
  static final personAge =
      QueryIntegerProperty<PersonModel>(_entities[3].properties[2]);

  /// see [PersonModel.personGender]
  static final personGender =
      QueryBooleanProperty<PersonModel>(_entities[3].properties[3]);

  /// see [PersonModel.personLocation]
  static final personLocation =
      QueryStringProperty<PersonModel>(_entities[3].properties[4]);
}

/// [SentMessage] entity fields to define ObjectBox queries.
class SentMessage_ {
  /// see [SentMessage.id]
  static final id =
      QueryIntegerProperty<SentMessage>(_entities[4].properties[0]);

  /// see [SentMessage.message]
  static final message =
      QueryStringProperty<SentMessage>(_entities[4].properties[1]);

  /// see [SentMessage.isSent]
  static final isSent =
      QueryBooleanProperty<SentMessage>(_entities[4].properties[2]);

  /// see [SentMessage.time]
  static final time =
      QueryIntegerProperty<SentMessage>(_entities[4].properties[3]);
}
