// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'models/call_history_item_model.dart';
import 'models/chat_history_item_model.dart';
import 'models/chat_message_model.dart';
import 'models/medicine_course_item_model.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(3, 8027214234248683554),
      name: 'MedicineGroupItemModel',
      lastPropertyId: const IdUid(4, 1379912020908502164),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5138091674674432502),
            name: 'id',
            type: 6,
            flags: 129),
        ModelProperty(
            id: const IdUid(2, 8827034760457528428),
            name: 'topic',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 9029017546592320138),
            name: 'medicines',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 1379912020908502164),
            name: 'isExpanded',
            type: 1,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(4, 9073091288297953078),
      name: 'CallHistoryItemModel',
      lastPropertyId: const IdUid(3, 4525596011742575970),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 6346513096194227888),
            name: 'id',
            type: 6,
            flags: 129),
        ModelProperty(
            id: const IdUid(2, 3662792875235403304),
            name: 'personName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 4525596011742575970),
            name: 'calledTime',
            type: 10,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(5, 8904754258716067804),
      name: 'ChatHistoryItemModel',
      lastPropertyId: const IdUid(5, 5191764943854953692),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 1616304233415431096),
            name: 'id',
            type: 6,
            flags: 129),
        ModelProperty(
            id: const IdUid(2, 5349548446453258095),
            name: 'personName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 2368944319401154011),
            name: 'lastTextTime',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 8802005419694245521),
            name: 'lastText',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 5191764943854953692),
            name: 'unReadText',
            type: 6,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(6, 7635442384589216836),
      name: 'ChatMessage',
      lastPropertyId: const IdUid(4, 3082582995115494336),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 8235838757525207354),
            name: 'id',
            type: 6,
            flags: 129),
        ModelProperty(
            id: const IdUid(2, 1627407459020442323),
            name: 'message',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 2059243689362122987),
            name: 'isSent',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 3082582995115494336),
            name: 'time',
            type: 10,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(6, 7635442384589216836),
      lastIndexId: const IdUid(0, 0),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [8650434618452904353, 6145695837408192305],
      retiredIndexUids: const [],
      retiredPropertyUids: const [
        8347654834679933989,
        7173028985818334418,
        6327909229550554017,
        7294565735257676444,
        6021933507435462884,
        816372526415688392,
        1729858640080741063
      ],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    MedicineGroupItemModel: EntityDefinition<MedicineGroupItemModel>(
        model: _entities[0],
        toOneRelations: (MedicineGroupItemModel object) => [],
        toManyRelations: (MedicineGroupItemModel object) => {},
        getId: (MedicineGroupItemModel object) => object.id,
        setId: (MedicineGroupItemModel object, int id) {
          object.id = id;
        },
        objectToFB: (MedicineGroupItemModel object, fb.Builder fbb) {
          final topicOffset = fbb.writeString(object.topic);
          final medicinesOffset = fbb.writeList(
              object.medicines.map(fbb.writeString).toList(growable: false));
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, topicOffset);
          fbb.addOffset(2, medicinesOffset);
          fbb.addBool(3, object.isExpanded);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = MedicineGroupItemModel(
              topic: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              medicines: const fb.ListReader<String>(
                      fb.StringReader(asciiOptimization: true),
                      lazy: false)
                  .vTableGet(buffer, rootOffset, 8, []),
              isExpanded: const fb.BoolReader()
                  .vTableGetNullable(buffer, rootOffset, 10))
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    CallHistoryItemModel: EntityDefinition<CallHistoryItemModel>(
        model: _entities[1],
        toOneRelations: (CallHistoryItemModel object) => [],
        toManyRelations: (CallHistoryItemModel object) => {},
        getId: (CallHistoryItemModel object) => object.id,
        setId: (CallHistoryItemModel object, int id) {
          object.id = id;
        },
        objectToFB: (CallHistoryItemModel object, fb.Builder fbb) {
          final personNameOffset = fbb.writeString(object.personName);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, personNameOffset);
          fbb.addInt64(2, object.calledTime.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = CallHistoryItemModel(
              personName: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              calledTime: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0)))
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    ChatHistoryItemModel: EntityDefinition<ChatHistoryItemModel>(
        model: _entities[2],
        toOneRelations: (ChatHistoryItemModel object) => [],
        toManyRelations: (ChatHistoryItemModel object) => {},
        getId: (ChatHistoryItemModel object) => object.id,
        setId: (ChatHistoryItemModel object, int id) {
          object.id = id;
        },
        objectToFB: (ChatHistoryItemModel object, fb.Builder fbb) {
          final personNameOffset = fbb.writeString(object.personName);
          final lastTextOffset = fbb.writeString(object.lastText);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, personNameOffset);
          fbb.addInt64(2, object.lastTextTime?.millisecondsSinceEpoch);
          fbb.addOffset(3, lastTextOffset);
          fbb.addInt64(4, object.unReadText);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final lastTextTimeValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 8);
          final object = ChatHistoryItemModel(
              personName: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              lastTextTime: lastTextTimeValue == null
                  ? null
                  : DateTime.fromMillisecondsSinceEpoch(lastTextTimeValue),
              lastText: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              unReadText:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0))
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    ChatMessage: EntityDefinition<ChatMessage>(
        model: _entities[3],
        toOneRelations: (ChatMessage object) => [],
        toManyRelations: (ChatMessage object) => {},
        getId: (ChatMessage object) => object.id,
        setId: (ChatMessage object, int id) {
          object.id = id;
        },
        objectToFB: (ChatMessage object, fb.Builder fbb) {
          final messageOffset = fbb.writeString(object.message);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, messageOffset);
          fbb.addBool(2, object.isSent);
          fbb.addInt64(3, object.time.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = ChatMessage(
              time: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0)),
              message: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              isSent:
                  const fb.BoolReader().vTableGet(buffer, rootOffset, 8, false))
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [MedicineGroupItemModel] entity fields to define ObjectBox queries.
class MedicineGroupItemModel_ {
  /// see [MedicineGroupItemModel.id]
  static final id =
      QueryIntegerProperty<MedicineGroupItemModel>(_entities[0].properties[0]);

  /// see [MedicineGroupItemModel.topic]
  static final topic =
      QueryStringProperty<MedicineGroupItemModel>(_entities[0].properties[1]);

  /// see [MedicineGroupItemModel.medicines]
  static final medicines = QueryStringVectorProperty<MedicineGroupItemModel>(
      _entities[0].properties[2]);

  /// see [MedicineGroupItemModel.isExpanded]
  static final isExpanded =
      QueryBooleanProperty<MedicineGroupItemModel>(_entities[0].properties[3]);
}

/// [CallHistoryItemModel] entity fields to define ObjectBox queries.
class CallHistoryItemModel_ {
  /// see [CallHistoryItemModel.id]
  static final id =
      QueryIntegerProperty<CallHistoryItemModel>(_entities[1].properties[0]);

  /// see [CallHistoryItemModel.personName]
  static final personName =
      QueryStringProperty<CallHistoryItemModel>(_entities[1].properties[1]);

  /// see [CallHistoryItemModel.calledTime]
  static final calledTime =
      QueryIntegerProperty<CallHistoryItemModel>(_entities[1].properties[2]);
}

/// [ChatHistoryItemModel] entity fields to define ObjectBox queries.
class ChatHistoryItemModel_ {
  /// see [ChatHistoryItemModel.id]
  static final id =
      QueryIntegerProperty<ChatHistoryItemModel>(_entities[2].properties[0]);

  /// see [ChatHistoryItemModel.personName]
  static final personName =
      QueryStringProperty<ChatHistoryItemModel>(_entities[2].properties[1]);

  /// see [ChatHistoryItemModel.lastTextTime]
  static final lastTextTime =
      QueryIntegerProperty<ChatHistoryItemModel>(_entities[2].properties[2]);

  /// see [ChatHistoryItemModel.lastText]
  static final lastText =
      QueryStringProperty<ChatHistoryItemModel>(_entities[2].properties[3]);

  /// see [ChatHistoryItemModel.unReadText]
  static final unReadText =
      QueryIntegerProperty<ChatHistoryItemModel>(_entities[2].properties[4]);
}

/// [ChatMessage] entity fields to define ObjectBox queries.
class ChatMessage_ {
  /// see [ChatMessage.id]
  static final id =
      QueryIntegerProperty<ChatMessage>(_entities[3].properties[0]);

  /// see [ChatMessage.message]
  static final message =
      QueryStringProperty<ChatMessage>(_entities[3].properties[1]);

  /// see [ChatMessage.isSent]
  static final isSent =
      QueryBooleanProperty<ChatMessage>(_entities[3].properties[2]);

  /// see [ChatMessage.time]
  static final time =
      QueryIntegerProperty<ChatMessage>(_entities[3].properties[3]);
}
